% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find.R
\name{find_shinylive_code}
\alias{find_shinylive_code}
\title{Find Shinylive Code Blocks in Quarto HTML}
\usage{
find_shinylive_code(html)
}
\arguments{
\item{html}{Character string containing HTML content. The HTML should contain
code blocks with class \code{'shinylive-r'} or \code{'shinylive-python'} to be processed.}
}
\value{
A list of parsed Shinylive applications. Each list element contains:
\itemize{
\item \code{engine}: Character string indicating the application type (\code{"r"} or \code{"python"})
\item \code{options}: List of parsed YAML-style options from the code block
\item \code{files}: List of file definitions, where each file contains:
\itemize{
\item \code{name}: Character string of the file name
\item \code{content}: Character string of the file content
\item \code{type}: Character string indicating the file type
}
}
}
\description{
Parses HTML content to extract and process Shinylive code blocks for both R and Python
applications. This function identifies code blocks with class \code{'shinylive-r'} or
\code{'shinylive-python'} and processes their content into structured application data.
}
\details{
The function performs the following steps:
\enumerate{
\item Parses the HTML content using \code{rvest}
\item Extracts code blocks with classes \code{'shinylive-r'} or \code{'shinylive-python'}
\item For each code block:
\itemize{
\item Determines the engine type from the 'data-engine' attribute
\item Extracts the code text content
\item Parses the code block structure using \code{parse_code_block()}
}
}

Code blocks should follow the Shinylive format with optional YAML-style
options (prefixed with \code{'#|'}) and file markers (prefixed with \code{'## file:'}).
}
\examples{
\dontrun{
html_content <- '
<pre class="shinylive-r" data-engine="r">
#| viewerHeight: 500
## file: app.R
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui, server)
</pre>
'
apps <- find_shinylive_code(html_content)
}

}
\seealso{
parse_code_block
}
\keyword{internal}
