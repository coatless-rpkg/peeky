% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/peek.R
\name{peek_shinylive_app}
\alias{peek_shinylive_app}
\title{Download and Extract Shinylive Applications from URLs}
\usage{
peek_shinylive_app(url, output_dir = "converted_shiny_app")
}
\arguments{
\item{url}{Character string. URL pointing to one of:
\itemize{
\item A standalone Shinylive application (containing \code{app.json})
\item A directory containing \code{app.json}
\item A Quarto document with embedded Shinylive applications
}}

\item{output_dir}{Character string. Directory where the application files should
be extracted. Defaults to \code{"converted_shiny_app"}. Will be created if it doesn't exist.}
}
\value{
An object containing the extracted application information:
\itemize{
\item For standalone apps: Object of class \code{"standalone_shinylive_app"}
\item For Quarto documents: Object of class \code{"quarto_shinylive_apps"}
}

Both object types implement custom print methods that display:
\itemize{
\item Application type (R or Python)
\item Commands to run the application
\item List of extracted files
\item Output directory location
}
}
\description{
Downloads and extracts Shinylive applications from various URL sources. The function
can handle both standalone Shinylive applications and Quarto documents containing
embedded Shinylive applications. It automatically detects the application type
and extracts the necessary files.
}
\details{
The function follows these steps:
\enumerate{
\item Downloads and analyzes the content at the provided URL
\item Determines if the content is a Quarto document or standalone application
\item For Quarto documents:
\itemize{
\item Extracts all embedded Shinylive applications
\item Creates separate directories for each application
}
\item For standalone applications:
\itemize{
\item Locates and validates the \code{app.json} file
\item Extracts all application files to the specified directory
}
}
}
\section{URL Resolution}{


The function attempts several strategies to find app.json:
\itemize{
\item Direct use of the provided URL
\item Appending \code{"app.json"} to the URL
\item Checking the parent directory
}
}

\section{Error Handling}{


The function will error with informative messages if:
\itemize{
\item The URL cannot be accessed
\item No valid Shinylive application is found
\item The \code{app.json} structure is invalid
}
}

\examples{
\dontshow{if (interactive()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Download a standalone Shinylive application
url <- "https://tutorials.thecoatlessprofessor.com/convert-shiny-app-r-shinylive/"

app <- peek_shinylive_app(url)

# Extract to a specific directory
app <- peek_shinylive_app(
  url,
  output_dir = "my_extracted_app"
)

# Download from a Quarto document
apps <- peek_shinylive_app("https://quarto-ext.github.io/shinylive/")
\dontshow{\}) # examplesIf}
}
\seealso{
\itemize{
\item \code{\link[=peek_quarto_shinylive_app]{peek_quarto_shinylive_app()}} for handling Quarto documents specifically
\item \code{\link[=peek_standalone_shinylive_app]{peek_standalone_shinylive_app()}} for handling standalone applications
}
}
