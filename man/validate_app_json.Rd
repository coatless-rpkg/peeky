% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{validate_app_json}
\alias{validate_app_json}
\title{Validate Shinylive \code{app.json} Structure}
\usage{
validate_app_json(json_data)
}
\arguments{
\item{json_data}{List. Parsed JSON data from an app.json file. Should be a list
where each element represents a file and contains:
\itemize{
\item \code{name}: Character string of the file name
\item \code{content}: Character string of the file content
\item \code{type}: Character string indicating the file type
}}
}
\value{
Logical TRUE if validation passes. If validation fails, throws an error
with detailed information about the validation failure using cli_abort().
}
\description{
Validates that a parsed \code{app.json} structure meets the requirements for a
Shinylive application. Checks for proper list structure, required fields,
and non-empty content. Provides detailed error messages when validation fails.
}
\section{Validation Rules}{

The function checks these requirements:
\enumerate{
\item \code{json_data} must be a list
\item \code{json_data} must contain at least one element
\item Each element must be a list (representing a file)
\item Each file list must contain all required fields:
\itemize{
\item \code{name}
\item \code{content}
\item \code{type}
}
}
}

\section{Error Messages}{


The function provides detailed error messages for these cases:
\itemize{
\item Not a list: "Expected a list or array of files"
\item Empty list: "File list is empty"
\item Invalid file entry: "Each entry must be a file object"
\item Missing fields: Lists specific missing required fields
}
}

\section{Expected JSON Structure}{

The expected JSON structure is an array of objects, where each object represents
a file in the application.

\if{html}{\out{<div class="sourceCode json">}}\preformatted{[
  \{
    "name": "app.R",
    "content": "library(shiny)\\n...",
    "type": "text"
  \},
  \{
    "name": "data/example.csv",
    "content": "x,y\\n1,2\\n...",
    "type": "text"
  \}
]
}\if{html}{\out{</div>}}
}

\examples{
\dontrun{
# Valid structure
valid_data <- list(
  list(
    name = "app.R",
    content = "library(shiny)\n...",
    type = "text"
  ),
  list(
    name = "data.csv",
    content = "x,y\n1,2",
    type = "text"
  )
)
validate_app_json(valid_data)  # Returns TRUE

# Invalid structures that will error:
validate_app_json(list())  # Empty list
validate_app_json(list(
  list(name = "app.R")  # Missing required fields
))
}
}
\seealso{
\itemize{
\item \code{\link[=find_shinylive_app_json]{find_shinylive_app_json()}} which uses this validation
}
}
\keyword{internal}
