% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/writers.R
\name{write_apps_to_quarto}
\alias{write_apps_to_quarto}
\title{Write Shinylive Applications to a Quarto Document}
\usage{
write_apps_to_quarto(apps, qmd_path)
}
\arguments{
\item{apps}{List of parsed Shinylive applications. Each application should
contain:
\itemize{
\item \code{engine}: Character string identifying the app type (\code{"r"} or \code{"python"})
\item \code{options}: List of YAML-style options from the original code block
\item \code{files}: Named list of file definitions, each containing:
\itemize{
\item \code{name}: Character string of the file name
\item \code{content}: Character string of the file content
\item \code{type}: Character string indicating the file type
}
}}

\item{qmd_path}{Character string. Path where the Quarto document should be
written. Should end with \code{.qmd} extension. Parent directory will be created
if it doesn't exist.}
}
\description{
Converts a list of parsed Shinylive applications into a single Quarto document.
Creates a properly formatted .qmd file with YAML frontmatter, organized sections
for each application, and correctly formatted code blocks with all necessary
markers and options.
}
\details{
The function performs these steps:
\enumerate{
\item Creates YAML frontmatter with required Quarto settings
\item For each application:
\itemize{
\item Adds a section header with application number
\item Creates a code block with appropriate engine (\code{shinylive-r}/\code{shinylive-python})
\item Converts and adds all application options
\item Adds file markers and content for each file
\item Properly closes the code block
}
\item Writes the complete document to the specified path
}
}
\section{Document Structure}{


Creates a Quarto document with this structure:

\if{html}{\out{<div class="sourceCode markdown">}}\preformatted{---
title: Extracted Shinylive Applications
filters:
  - shinylive
---

# Shinylive Applications

## Application 1

```\{shinylive-r\}
#| viewerHeight: 500
## file: app.R
## type: text
library(shiny)
...
```

## Application 2
...
}\if{html}{\out{</div>}}
}

\section{Option Formatting}{

Options are converted to YAML format based on their type:
\itemize{
\item Logical: \verb{#| option: true} or \verb{#| option: false}
\item Numeric: \verb{#| option: 500}
\item Character:
\itemize{
\item Single: \verb{#| option: "value"}
\item Vector: \verb{#| option: ["value1", "value2"]}
}
}
}

\examples{
\dontshow{
.old_wd <- setwd(tempdir()) # examplesTempdir 
}
# Example apps list structure
apps <- list(
  list(
    engine = "r",
    options = list(
      viewerHeight = 500,
      fullWidth = TRUE
    ),
    files = list(
      "app.R" = list(
        name = "app.R",
        content = "library(shiny)\n...",
        type = "text"
      )
    )
  )
)

write_apps_to_quarto(apps, "applications.qmd")
\dontshow{
setwd(.old_wd) # examplesTempdir 
}
}
\seealso{
\itemize{
\item \code{\link[=write_apps_to_dirs]{write_apps_to_dirs()}} for alternative directory output format
}
}
